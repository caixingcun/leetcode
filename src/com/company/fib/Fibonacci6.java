package com.company.fib;

/**
 * 求解斐波那契契数 自底而上 （ 动态规划 ）
 *  *                      6
 *  *              5               4
 *  *         4        3        3      2
 *  *      3     2   2    1   2    1  1  0
 *  *   2    1
 *  * 1  0
 *
 *
 * f(1)  f(0) -> f(2) ->f(3) ->f(4) ->f(5) ->f(6)->f(7)
 *               f(1) ->f(2) ->f(3) ->f(4) ->f(5)
 *
 * 求出 f(0)..f(n-1) 就能计算出 f(n)
 *
 * 动态规划四步骤
 * 1.定义状态数组  难点  （常规递归写法中 记忆化搜索的记忆数组 = 状态数组）
 * 2.状态初始化
 * 3.状态转移   难点  （）
 * 4.返回结果
 */
public class Fibonacci6 {
    
    public int fib(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        //1.定义状态数组  一般使用dp 来表示状态数组 dp[i] 数字i的斐波那契数
        int[] dp = new int[n + 1];
        //2.状态初始化
        dp[0] = 0;
        dp[1] = 1;
        //3.状态转移  一般可以根据状态转移方程实现  这里 f(n)=f(n-1)+f(n-2)
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        //4.返回结果
        return dp[n];
    }
}
